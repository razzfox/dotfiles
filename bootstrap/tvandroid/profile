echo "Start bash .profile"

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

function ctrl_c() {
  touch .notmux
}


# Fix Termux bugs
export ANDROID_DATA=/data ANDROID_ROOT=/system
export USER=${USER:-$(whoami)}
export TZ=$(getprop persist.sys.timezone)


# Select services
# TODO: checkout termux-services
sshd=true
www=true
reactrobot=false
gifs=false
transmission=true
dhcp=true
inbucket=true


$sshd && echo -n "sshd: "
if $sshd && ! pgrep -f sshd; then
  echo "Starting..."
  sshd -p 7299
fi

$www && echo -n "www: "
if $www && ! pgrep -f 'node \.'; then
  # Note: This command must be running on a server:
  # socat TCP4-LISTEN:80,fork,reuseaddr TCP4:craft.dhcp.io:8080 & disown
  # socat TCP4-LISTEN:443,fork,reuseaddr TCP4:craft.dhcp.io:4433 & disown
  echo "Starting..."
  wwwPorts="8080 4433"
  wwwKeys="$HOME/keys/privkey.pem $HOME/keys/fullchain.pem"
  nodeCmd="node . $wwwPorts $wwwKeys"
  nodeApp=www
  nodeLog=$HOME/.config/${nodeApp}.log
  pushd $HOME/${nodeApp}
  # Note: node will still exit on sighup despite using nohup!
  # so, use a bash loop. It will restart the first time after disconnecting,
  # and output must be given to the outer bash command
  nohup bash -c "while sleep 2; do ${nodeCmd} ; done" >$nodeLog & disown
  #nohup node app.js $wwwPorts $wwwKeys &>>$wwwLog & disown
  popd
fi

# possibly: npm start
# put this one first because they both look for start.js
$reactrobot && echo -n "react_robotinventory: "
if $reactrobot && ! pgrep -f 'npm start'; then
  # Note: This command must be running on a server:
  # Set the port number in .env
  # socat TCP4-LISTEN:3001,fork,reuseaddr TCP4:craft.dhcp.io:3001 & disown
  echo "Starting..."
  reactCmd='npm start'
  reactApp=react_robotinventory
  reactLog=$HOME/.config/${reactApp}.log
  pushd $HOME/${reactApp}
  # Note: node will still exit on sighup despite using nohup!
  # so, use a bash loop. It will restart the first time after disconnecting,
  # and output must be given to the outer bash command
  nohup bash -c "while sleep 2; do $reactCmd ; done &>$reactLog" & disown
#  nohup bash -c "while sleep 2; do node node_modules/react-scripts/scripts/start.js ; done" >$reactLog & disown
  popd
fi


# possible combined: npm run-script react-start
if $gifs && ! pgrep -f videoAPI.js; then
  echo -n "youtube-dl: "
  pipLog=$HOME/.config/pip.log
  pip install --upgrade youtube_dl &>${pipLog} || pip3 install --upgrade youtube_dl &>${pipLog} &

  # Note: This command must be running on a server:
  # socat TCP4-LISTEN:3080,fork,reuseaddr TCP4:craft.dhcp.io:3080 & disown
  echo "Starting..."
  backendCmd='node src/videoAPI.js'
  reactCmd='node node_modules/react-scripts/scripts/start.js'
  reactApp=gifs
  reactLog=$HOME/.config/${reactApp}.log
  backendLog=$HOME/.config/${reactApp}_backend.log
  pushd $HOME/${reactApp}
  # Note: node will still exit on sighup despite using nohup!
  # so, use a bash loop. It will restart the first time after disconnecting,
  # and output must be given to the outer bash command
  nohup bash -c "while sleep 2; do $reactCmd ; done" >$backendLog & disown
  nohup bash -c "while sleep 2; do $reactCmd ; done" >$reactLog & disown
  popd
fi

$transmission && echo -n "transmission-daemon: "
if $transmission && ! pgrep -f transmission-daemon; then
  echo "Starting..."
  transmission-daemon --logfile $HOME/.config/transmission-daemon/log.txt --log-error
fi

$dhcp && echo -n "dhcp_update: "
if $dhcp && ! pgrep -f dhcp_update; then
  echo "Starting..."
  # Chroot does not work inside the chroot, so only use for processes tha need it
  # This process uses /var/run and /var/log
  nohup termux-chroot bash dotfiles/scripts/ip/dhcp_update.arch &>>$HOME/.config/dhcp_update.log & disown
fi

$inbucket && echo -n "inbucket: "
if $inbucket && ! pgrep -f inbucket; then
  echo "Starting..."
  # Note: This command must be running on a server:
  # socat TCP4-LISTEN:25,fork,reuseaddr TCP4:craft.dhcp.io:2500 & disown
  # socat TCP4-LISTEN:110,fork,reuseaddr TCP4:craft.dhcp.io:1100 & disown
  # Settings can be generated here:
  # https://www.inbucket.org/configurator/
  export INBUCKET_MAILBOXNAMING="local"
  export INBUCKET_SMTP_ADDR="0.0.0.0:2500"
  export INBUCKET_SMTP_DOMAIN="razzfox.me"
  export INBUCKET_SMTP_MAXMESSAGEBYTES="10240000"
  export INBUCKET_SMTP_TIMEOUT="10s"
  export INBUCKET_POP3_ADDR="0.0.0.0:1100"
  export INBUCKET_POP3_DOMAIN="razzfox.me"
  export INBUCKET_POP3_TIMEOUT="10s"
  export INBUCKET_WEB_ADDR="0.0.0.0:9090"
  export INBUCKET_WEB_MAILBOXPROMPT=""
  export INBUCKET_STORAGE_TYPE="memory"
  export INBUCKET_STORAGE_RETENTIONPERIOD="2160h"
  export INBUCKET_STORAGE_RETENTIONSLEEP="86400s"
  mkdir -p $HOME/.config/inbucket
  pushd $HOME/go/src/github.com/jhillyerd/inbucket
  #nohup env INBUCKET_WEB_ADDR=0.0.0.0:9090 $HOME/go/bin/inbucket $HOME/.config/inbucket/inbucket.conf &>>$HOME/.config/inbucket/mail_server.log & disown
  # $HOME/.config/inbucket/inbucket.conf
  nohup $HOME/go/bin/inbucket &>>$HOME/.config/inbucket/mail_server.log & disown
  popd
fi

echo 'storage_links.sh...'
bash $HOME/dotfiles/bootstrap/tvandroid/storage_links.sh &>/dev/null & disown

echo 'download_keys.sh...'
pushd $HOME/keys
bash download_keys.sh &>/dev/null & disown
popd

# Remove VLC auto-generated file (it should be in a cache location)
rmdir internal/Subtitles &>/dev/null

#echo 'Running bash_profile... Press Control-C to disable tmux'
#sleep 1
