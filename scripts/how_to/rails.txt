############################
# Setup (client and server)
############################


When you install ruby, it will also install the executable binary 'gem' in /bin. What's supposed to work, on any Linux, is 'gem install rails'.

Rails is just a gem. It calls for other gems called 'bundle' and 'rake' as dependencies, but those are independent gems too.

The install command creates '.gems/' in the user home dir, and installs all gems to '.gems/bin/'.

To use the gem executables, that path must be added to the shell PATH variable. That is done by writing into the '.bashrc' file: 'PATH=$PATH:$HOME/.gems/bin'

Then you're all set to do 'rails new'

I just ran "rails s -p 80 -d". The "-p" or "--port" switch tells rails to bind the specified port directly to itself. Setting the port in this way has nothing to do with the dev/production environments.

Normally however, Linux only allows root processes to bind ports below 1024, but we have no good reason to run ruby as root. Also, it's a roundabout and confusing solution to forward ports inside the same machine, without any benefit at all.
I simply set the "capability" to the rails binary (which may be several readlinks down), with "setcap" as root (apt-get install libcap2-bin, setpcaps on RHEL 5):

"setcap cap_net_bind_service=ep $(which rails)"

This command survives reboots.






# All systems:

# Exports (so that child processes have them)
export PATH=$HOME/.gem/ruby/2.1.0/bin:$PATH
export GEM_HOME=$HOME/.gem

cat > $HOME/.gemrc << MARK
gem: --user-install --no-document
gempath: $HOME/.gem
MARK

# Depreciated...
#gem: --no-ri --no-rdoc


# Ubuntu:
# Make sure Terminal preference "run login shell" (bash --login) is set
# You may or may not need to pecify the version RVM should use (google it)

# Must use RVM
#curl -L https://get.rvm.io | bash -s stable --rails
curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable --autolibs=enabled --ruby --rails --trace

# NVM (nodejs version manager)
curl https://raw.githubusercontent.com/creationix/nvm/v0.5.1/install.sh | sh

# Arch:
gem install rails


# Install git support programs:
npm install -g ungit

pacman -S sqlitebrowser meld


#################
# Init rails app
#################

cd repo/

# origin may already exist if 'git clone' was used
git remote add origin user@server.com:/dir/repo

git pull origin master

# if merge conflict happened, edit named files,
git add -A .
git commit -m "merged etc..."

# push the new merge commit
git push origin master

# gems are not installed by git
bundle install

# database
rake db:reset db:migrate db:populate

# rails runs a detached server at default localhost:3000
thin start -d

# stop server
thin stop

# Error: You have already activated "A", but your Gemfile requires "B".
rm Gemfile.lock

#############
# Rails Tips
#############

# remove local references to remote branches that have been deleted
git remote prune origin

# remember that databases are in .gitignore, so every server and client must rake db:xxx manually after code changes
db:create          # creates the database for the current env
db:create:all      # creates the databases for all envs
db:drop            # drops the database for the current env
db:drop:all        # drops the databases for all envs
db:migrate         # runs migrations for the current env that have not run yet
db:migrate:up      # runs one specific migration
db:migrate:down    # rolls back one specific migration
db:migrate:status  # shows current migration status
db:migrate:rollback # rolls back the last migration
db:forward         # advances the current schema version to the next one
db:seed            # (only) runs the db/seed.rb file
db:schema:load     # loads the schema into the current env's database
db:schema:dump     # dumps the current env's schema (and seems to create the db as well)
db:setup           # runs db:schema:load, db:seed
db:reset           # runs db:drop db:setup
db:migrate:redo    # runs (db:migrate:down db:migrate:up) or (db:migrate:rollback db:migrate:migrate) depending on the specified migration
db:migrate:reset   # runs db:drop db:create db:migrate


# Rails Application Flow:
1. Browser makes HTTP Request (GET, POST, PATCH, DELETE).
2. Rails maps the request URL in the /config/routes.rb file. Part of it may be designated a variable (/:id, etc).
3. The mapped function in the specified Controller class is run, usually the same name as the URL.
  - The generalized /controllers/application_controller.rb file is always run first.
4. Rails renders the corresponding View html.erb and any _partials called inside it, using images, javascript, and stylesheet css in /assets.
  - Module functions in /helpers are available for use inside erb code. This exists because code inside the controller has already been executed, and is not available to the erb.
  - The /layouts/application.html.erb is run first, and ‘yields’ to encapsulate the requested view.
  - The same thing happens for the stylesheets and javascript in /assets/.
  - The /public folder contains error pages, favicon, and robots.txt, with total public access to its files.

# Furthermore:
? The model is constructed largely as instance variables and inherited methods. Most tasks are done through the controller.
The command rails console allows live code to be run on the site. There is a --sandbox option for testing.
