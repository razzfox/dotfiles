# Status
df -h | grep '/storage/emulated'

# Zsh
HISTFILE=$HOME/.${SHELL//*\/}_history
SAVEHIST=100000000

# Android TV D8:5D:E2:3B:61:D1
echo "Start .profile"

# trap ctrl-c and call ctrl_c()
if test -f .notmux; then
  echo 'Press Control-C to disable tmux'
  function ctrl_c() {
    touch .notmux
  }
  trap ctrl_c INT
else
  echo 'Press Control-C to enable tmux'
  function ctrl_c() {
    rm .notmux
  }
  trap ctrl_c INT
fi


echo -n 'storage_links.sh: '
bash $HOME/dotfiles/tvandroid/storage_links.sh &>/dev/null & disown

# Remove VLC auto-generated file (it should be in a cache location)
rmdir internal/Subtitles &>/dev/null


# Fix Termux bugs
export ANDROID_DATA=/data ANDROID_ROOT=/system
export USER=${USER:-$(whoami)}
export TZ=$(getprop persist.sys.timezone)


# Select services
sshd=true
#7299
www=true
# router forwards (sub 2^10 port)
# HTTP 80 => 8080
# HTTPS 443 => 4430
wwwPorts="8080 4430"
uploads=true
#3000
reactrobot=false
gifs=false
gifsAPI=true
#3080
transmission=false
#9091
dhcp=true
inbucket=true
# router forwards (sub 2^10 port)
# SMTP 587 => 5870
#5870,1110,9090
codeserver=false
#8000

$sshd && echo -n "sshd: "
if $sshd && ! pgrep -f sshd; then
  echo "Starting..."
  sshdlogs=".config/auth.log"
  sshd -p 7299 -e -D >> $sshdlogs 2>&1 & disown
  # default system log:
  # logcat -s 'sshd:*'
fi

wwwKeyDir="$HOME/ssl/certs/razzfox.me"
wwwKeys="${wwwKeyDir}/privkey.pem ${wwwKeyDir}/fullchain.pem"
$www && echo -n "www: "
if $www; then
  echo -n 'download_keys.sh: '
  date=$(date +%F)
  stat=$(stat -c %y ./ssl)
  if test ${date:0:9} != ${stat:0:9}; then
    echo Update SSL Keys! Last update: ${stat%% *}
    nodeCmd="node . $wwwPorts $wwwKeys"
    pkill $nodeCmd
    pushd ssl
    zsh renew_certs.sh
    popd
  else
    echo ${stat%% *}
  fi
fi

nodeCmd="node . $wwwPorts $wwwKeys"
if $www && ! pgrep -f ${nodeCmd}; then
  # Note: This command must be running on a server:
  # socat TCP4-LISTEN:80,fork,reuseaddr TCP4:craft.dhcp.io:8080 & disown
  # socat TCP4-LISTEN:443,fork,reuseaddr TCP4:craft.dhcp.io:4433 & disown

  echo "Starting..."
  nodeApp=www
  nodeLog=$HOME/.config/${nodeApp}.log
  pushd $HOME/${nodeApp}
  nohup bash -c "while sleep 2; do ${nodeCmd} ; done" >$nodeLog & disown

  # Note: node will still exit on sighup despite using nohup!
  # so, use a bash loop. It will restart the first time after disconnecting,
  # and output must be given to the outer bash command
  #nohup node app.js $wwwPorts $wwwKeys &>>$wwwLog & disown
  popd
fi

$uploads && echo -n "uploads: "
if $uploads && ! pgrep -f 'node .'; then
  echo "Starting..."
  serverCmd=(npm start)
  serverApp=uploads
  serverLog=$HOME/.config/${serverApp}.log
  pushd $HOME/${serverApp}
  nohup ${serverCmd[@]} &>>$serverLog & disown
  popd
fi

# put this one first because they both look for start.js
$reactrobot && echo -n "react_robotinventory: "
if $reactrobot && ! pgrep -f 'npm start'; then
  # Note: This command must be running on a server:
  # Set the port number in .env
  # socat TCP4-LISTEN:3001,fork,reuseaddr TCP4:craft.dhcp.io:3001 & disown

  echo "Starting..."
  reactCmd=(npm start)
  reactApp=react_robotinventory
  reactLog=$HOME/.config/${reactApp}.log
  pushd $HOME/${reactApp}
  nohup ${reactCmd[@]} &>>$reactLog & disown

  # Note: node will still exit on sighup despite using nohup!
  # so, use a bash loop. It will restart the first time after disconnecting,
  # and output must be given to the outer bash command
  #nohup bash -c "while sleep 2; do $reactCmd ; done" >$reactLog & disown
  popd
fi

# possible combined: npm run-script react-start
$gifsAPI && echo -n "gifsAPI: "
if $gifsAPI && ! pgrep -f videoAPI.js; then
  echo -n "youtube-dl: "
  pipLog=$HOME/.config/pip.log
  (
    pip install --upgrade youtube_dl &>${pipLog} || pip3 install --upgrade youtube_dl &>${pipLog}
  ) & disown

  echo "Starting..."
  # Note: This command must be running on a server:
  # socat TCP4-LISTEN:3080,fork,reuseaddr TCP4:craft.dhcp.io:3080 & disown

  reactApp=videoeditor
  # Warning: wwwKeys here would only create a single argument
  backendCmd=(node src/videoAPI.js 3080 /data/data/com.termux/files/home/ssl/certs/razzfox.me/privkey.pem /data/data/com.termux/files/home/ssl/certs/razzfox.me/fullchain.pem)
  #reactCmd=(node node_modules/react-scripts/scripts/start.js)
  reactCmd=(npx serve -l 3001 --no-clipboard --ssl-key ${wwwKeyDir}/privkey.pem --ssl-cert ${wwwKeyDir}/fullchain.pem build)
  reactLog=$HOME/.config/${reactApp}.log
  backendLog=$HOME/.config/${reactApp}_backend.log
  pushd $HOME/${reactApp}
  echo -n "backend: "
  nohup ${backendCmd[@]} &>>$backendLog & disown
  if $gifs && ! pgrep -f "${reactCmd[@]}"; then
    echo -n "frontend: "
    nohup ${reactCmd[@]} &>>$reactLog & disown
  fi
  # Note: node will still exit on sighup despite using nohup!
  # so, use a bash loop. It will restart the first time after disconnecting,
  # and output must be given to the outer bash command
  #nohup bash -c "while sleep 2; do $backendCmd ; done" >$backendLog & disown
  #nohup bash -c "while sleep 2; do $reactCmd ; done" >$reactLog & disown
  popd
fi

$transmission && echo -n "transmission-daemon: "
if $transmission && ! pgrep -f transmission-daemon; then
  echo "Starting..."
  transmission-daemon --logfile $HOME/.config/transmission-daemon/log.txt --log-error
fi

$dhcp && echo -n "dhcp_update: "
if $dhcp && ! pgrep -f dhcp_update; then
  echo "Starting..."
  # Note: This process uses /var/run and /var/log, so proot is necessary.

  taskCmd=(termux-chroot bash dotfiles/scripts/ip/dhcp_update.arch)
  taskName=dhcp_update
  taskLog=$HOME/.config/${taskName}.log
  nohup ${taskCmd[@]} &>>$taskLog & disown
fi

$inbucket && echo -n "inbucket: "
if $inbucket && ! pgrep -f inbucket; then
  echo "Starting..."
  # Note: This command must be running on a server:
  # socat TCP4-LISTEN:25,fork,reuseaddr TCP4:craft.dhcp.io:5870 & disown
  # socat TCP4-LISTEN:110,fork,reuseaddr TCP4:craft.dhcp.io:1110 & disown

  # Settings can be generated here:
  # https://www.inbucket.org/configurator/
  export INBUCKET_MAILBOXNAMING="local"
  export INBUCKET_SMTP_ADDR="0.0.0.0:5870"
  export INBUCKET_SMTP_DOMAIN="razzfox.me"
  export INBUCKET_SMTP_MAXMESSAGEBYTES="20480000"
  export INBUCKET_SMTP_TIMEOUT="10s"
  export INBUCKET_POP3_ADDR="0.0.0.0:1110"
  export INBUCKET_POP3_DOMAIN="razzfox.me"
  export INBUCKET_POP3_TIMEOUT="10s"
  export INBUCKET_WEB_ADDR="0.0.0.0:9090"
  export INBUCKET_WEB_MAILBOXPROMPT=""
  export INBUCKET_STORAGE_TYPE="memory"
  export INBUCKET_STORAGE_RETENTIONPERIOD="2160h"
  export INBUCKET_STORAGE_RETENTIONSLEEP="86400s"
  # $HOME/.config/inbucket/inbucket.conf

  taskCmd=($HOME/go/bin/inbucket)
  taskName=inbucket
  taskLog=$HOME/.config/${taskName}.log
  mkdir -p $HOME/.config/inbucket
  pushd $HOME/go/src/github.com/jhillyerd/inbucket
  nohup ${taskCmd[@]} &>>$taskLog & disown
  popd
fi

$codeserver && echo -n "code-server: "
if $codeserver && ! pgrep -f code-server; then
  echo "Starting..."
  cmdLog=".config/code-server.log"
  code-server >> $cmdLog 2>&1 & disown
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# ZSH
export EDITOR=nano
